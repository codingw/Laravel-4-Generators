<?php

use Woodling\Woodling;
use Illuminate\Database\Eloquent\ModelNotFoundException;

class {{className}} extends ControllerTest {

  use Codeception\Specify;

	public function testIndex() {
    $path = URL::action('{{Models}}Controller@index', [], false);

    $this->specify("it renders the view", function() use($path) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{models}}');
      $this->assertContains('table', $response->getContent());
    });
	}

	public function testCreate() {
    $path = URL::action('{{Models}}Controller@create', [], false);

    $this->specify("renders the view", function() use($path) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{model}}');
      $this->assertContains('form', $response->getContent());
    });
	}

	public function testStore() {
    $path = URL::action('{{Models}}Controller@store', [], false);

    $this->specify("when valid, it persists the {{model}} and redirects", function() use($path) {
      ${{model}} = Woodling::retrieve('{{Model}}');
      $validInputs = array_except(${{model}}->getAttributes(), ['updated_at', 'created_at']);

      $response = $this->post($path, $validInputs);
		  $this->assertRedirectedToRoute('{{models}}.show', ['{{models}}' => {{Model}}::last()->id]);
    });

    $this->specify("when invalid, it flashes errors and redirects", function() use($path) {
      $invalidInputs = [];

      $response = $this->post($path, $invalidInputs);
      $this->assertRedirectedToRoute('{{models}}.create');
      $this->assertSessionHasErrors();
      $this->assertSessionHas('message');
    });
	}

	public function testShow() {
    ${{model}} = Woodling::saved('{{Model}}');
    $path = URL::action('{{Models}}Controller@show', ['{{models}}' => ${{model}}->id], false);

    $this->specify("renders the view", function() use($path, ${{model}}) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{model}}');
      $this->assertContains('table', $response->getContent());
    });

    $this->specify("when not found, throws an exception", function() use($path, ${{model}}) {
      ${{model}}Mock = Mockery::mock('Vertical')->makePartial();
      ${{model}}Mock->shouldReceive('findOrFail')->andThrow(new ModelNotFoundException);
      App::instance('{{Model}}', ${{model}}Mock);

      $this->setExpectedException('Illuminate\Database\Eloquent\ModelNotFoundException');
      $response = $this->get($path);
    });
  }

	public function testEdit() {
    ${{model}} = Woodling::saved('{{Model}}');
    $path = URL::action('{{Models}}Controller@edit', ['{{models}}' => ${{model}}->id], false);

    $this->specify("renders the view", function() use(${{model}}, $path) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{model}}');
      $this->assertContains('form', $response->getContent());
    });
	}

	public function testUpdate() {
    ${{model}} = Woodling::saved('{{Model}}');
    $path = URL::action('{{Models}}Controller@update', ['{{models}}' => ${{model}}->id], false);

    $this->specify("when valid, it persists the {{model}} and redirects", function() use($path, ${{model}}) {
      $validInputs = array_except(${{model}}->getAttributes(), ['updated_at', 'created_at']);
      
      $response = $this->put($path, $validInputs);
      $this->assertRedirectedToRoute('{{models}}.show', ['{{models}}' => ${{model}}->id]);
    });

    $this->specify("when invalid, it flashes errors and redirects", function() use($path, ${{model}}) {
      $invalidInputs = [];

      $response = $this->put($path, $invalidInputs);
      $this->assertRedirectedToRoute('{{models}}.edit', ['{{models}}' => ${{model}}->id]);
      $this->assertSessionHasErrors();
      $this->assertSessionHas('message');
    });
	}

	public function testDestroy() {
    ${{model}} = Woodling::saved('{{Model}}');
    $path = URL::action('{{Models}}Controller@destroy', ['{{models}}' => ${{model}}->id], false);

    $this->specify("calls delete on the {{model}}", function() use($path, ${{model}}) {
      $response = $this->delete($path);
      $this->assertRedirectedToRoute('{{models}}.index');
    });
	}

}
